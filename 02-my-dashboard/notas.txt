INICIO DE PROYECTO 02-MY-DASHBOARD

Cuando un proyecto empieza a crecer bastante es recomendable usar o decirle al create-next-app que use la carpeta src para almacenar todo el codigo fuente de la pagina.

IMPORTANTE: Existe una funcion que viene desde next/navigation que nos permite rediccionar a la persona a una pagina en especial. Esta funcion admite un string como parametro que es la nueva ruta a la queremos acceder. OJO: Esta funcion retorna never, es decir, detiene toda la ejecucion de codigo abajo de su llamada si es que lo hubiera, por lo que es recomendable no escribir mas codigo luego de dicha llamada a la funcion debido a que la app nunca ejecutara dicho codigo

PAGINA DE CREACION DE COMPONENTES USANDO TAILWIND
Puede que a veces se usen muchos vectores para ello por lo que es necesario encajar los nombres de los atributos a como lo hace react para evitar errores
https://www.creative-tim.com/templates/tailwind

TIP
Cuando estamos programando en Next desde la version 13 en adelante es recomendable pensar siempre que estamos programando desde el lado del servidor, esto nos ayudara a que si en algun punto necesitamos hooks del lado del cliente, el mismo servidor nos mandara una alerta de que eso que estamos haciendo solo funciona de tal lugar, ese mensaje es el que necesitamos para saber cuando un componente es necesario del lado del cliente o del servidor

NEXT/IMAGE
Este componente propio de Next nos permite tener varias posibilidades a la hora de mostrar una imagen, una de ellas es que viene con lazyload por defecto y podemos configurarla para que se cargue bajo prioridad si asi lo necesitamos. Algo muy importante es que bloquea las imagenes de diferentes dominios para evitar todo tipo de hackeos

para configurar los dominios permitidos hacemos lo siguiente:
images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'images.unsplash.com',
      }
    ]
  }

Esto en el archivo next.config.ts

PROBLEMAS CON LOS SERVER COMPONENTS Y LOS CLIENT COMPONENTS
Uno de los problemas que mas nos vamos a enfrentar es que necesitamos algun componente que si o si debe de usar hooks propios de react por lo que facilmente vamos a tener que usar el use client, sin embargo por ejemplo nos impide la posibilidad de darle metadatos debido a que al usar el use client, el componente ya no es un server component, por lo que no podemos dar cabida a metadatos en ese componente en especifico

DATA FETCHING EN NEXT 15
Next agrega funcionalidad a la fetch API propia de JS agregando opciones como revalidacion de cache, solicitudes en parelelo o cascada, etc.

Sin embargo, en Next 13, que es el curso que estoy viendo el cache era forzado para toda request, sin embargo, en Next 15, el cache es optativo, es decir, el programador debe decidir si quiere que se almacene en cache o no, esto se hace usando el mismo fetch api de siempre pero agregando un objeto con la key/value de cache: 'force-cached' o 'no-cache' que es el comportamiento por defecto

Importante, a pesar de que si se puede crear la peticion dentro del functionalComponent es mejor separar funciones, y luego en el componente solamente llamarlas, ademas, si la peticion se maneja con async/await se debe de hacer un async functional component agregando la palabra async segun la sintaxis de la funcion lo requiera.

Next nos permite manejador dos tipos de errores, uno cuando el error es esperado, es decir, una request que sabemos que pueda dar error o cualquier otra cosa, y un error no esperado, es decir, algo que fallo y que no lo hemos manejado correctamente.

Para realizar una pagina de error debemos de ponerla en el mismo directorio donde nosotros queremos mostrar el error, ademas, NextJS nos ofrece una funcion especial que se llama notfound que nos permite redirigir a la pagina de error que nosotros queramos.

RUTAS DINAMICAS
Cuando queremos tener rutas dinamicas podemos crear un directorio con el nombre de la pagina/[id o parametro]/page.tsx

Esto automaticamente hace el prefetch de la pagina en cuestion y automaticamente en el componente tenemos informacion que llego directamente por ser una ruta dinamica, los parametros llegan en forma de promesa. El contenido de los parametros son: params, y searchParams en caso que incluyamos queries en la URL

CAMBIO: En next13 estos parametros eran pasados al componente como props sincronas, es decir, estaban listas para ser usadas, sin embargo, en Next15 estas props de rutas dinamicas son asincronas, por lo que primero es necesario manejarlo, o esperar, la respuesta del servidor a dichas props. Esto se usa mediante async/await, sin embargo, en React Components que se rendericen por el cliente pueda ser necesario que se use React.use en lugar del async/await

Una vez tenemos ya los params que el server component recibe, podemos manejar API request al elemento con ese id en especifico, etc

METADATA DINAMICA