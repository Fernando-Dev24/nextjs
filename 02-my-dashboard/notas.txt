COMO CONFIGURAR REDUX EN NEXT JS
El problema surge cuando redux necesita inicializarse mediante su provider, sin embargo, el hecho de hacer esto convendria usar use client lo cual mataria todos los beneficios de next js y los server components. Para lograr que ambos trabajen juntos sin comprometer la metodologia de trabajo de los demas tenemos que hacer lo siguiente

Crear un archivo de Providers donde llamaremos a Provider de redux y ahi adjuntaremos el store que estamos creando de redux. Esto lo renderizamos en el layout de nuestra app. Importante colocar la directiva de use client en el Providers.

OJO: Esta solucion pudiera parecer ser la correcta sin embargo vamos a enfrentarnos a un problema y es que cuando queramos que nuestro server le mande un estado en concreto a nuestro global state vamos a tener que almacenarlo en un HTTP o algo por el estilo. Esto se soluciona mas rapido usando cookies que almacenen la informacion para que este disponible en el cache de la app web.

CONFIGURAR STORE PARA DISPARAR ACCIONES Y SABER COMO ESTA EL ESTADO
Agregar estas dos lineas al final de store/index.ts

// Usamos estos dos hooks en lugar de usar useSelector y useDispatch como se usaba anteriormente, o se usa en vanilla js
export const useAppDispatch = useDispatch.withTypes<AppDispatch>();
export const useAppSelector = useSelector.withTypes<RootState>();

Para decirle a nuestro reducer action que necesitamos un payload usamos PayloadAction de redux tookit y mediante el tipado ponemos el valor que esperamos en el payload

RESTFUL API
NextJS ofrece una manera de manejar todos los eventos de una API Restful. Para esto ellos recomiendan crear una carpeta /api junto con el archivo route.js que esto nos permitira realizar cualquier accion que nosotros queramos. Ahora es importante saber que en ese directorio de api no podemos de ninguna manera adjuntar un archivo page porque entonces se ejecutaria el page antes que el route.ts

Por asi decirlo tenemos nuestro servidor usando la misma logica que nuestro frontend. Igualmente Next nos ayuda a mantener un orden no admitiendo que tengamos un page.ts y un route.ts en la misma carpeta.

Todos los endpoints creados con NextJS tienen que devolverse usando NextResponse y en formato JSON. Luego en el componente que queramos simplemente podemos obtener el valor haciendo un fetch a dicho endpoint

En dado caso queramos ejecutar un endpoint al no mas la app cargue lo recomendable es hacerlo en el Provider del estado global, sea que se use contextAPI o redux. De esta forma siempre se ejecutara al cargar la app

CREAR UN CUSTOM MIDDLEWARE
Los custom middleware de Redux tienen que crearse usando el getDefaultMiddleware de redux. Para hacerlo tenemos que crear una nueva funcion que reciba el state de tipo middlewareAPI

Los custom middleware tienen que ejecutarse usando el middlewareAPI para el state, y tiene que regresar dos cosas: un dispatch de tipo Dispatch e implicitamente el action de tipo Action