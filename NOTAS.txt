Como funcion una app SPA o single page application

1. La manera en como funciona es que el usuario entra a una URL con dominio como una pagina web normal, sin embargo, al momento de entrar a la pagina se inicia la primera solicitud.

2. El servidor responde con una respuesta llamada response la mayoria de las veces, esta respuesta contiene la aplicacion o la gran mayoria de la misma. En dicha respuesta se obtiene el HTML de la aplicacion, mas referencias a enlaces externos si es se llegaran a necesitar, como CDN, estilos, etc. Todo este proceso descrito anteriormente se encarga de realizarlo el framework que estamos usando, en este caso React, y esto no es malo al 100% del dia.

Ahora bien la pregunta viene cuando el usuario solamente quiere ver una parte de la aplicacion, es decir, en lugar de cargar toda la app, solamente quiere ver la pagina de mi perfil por ejemplo?

Algo muy importante de saber y reconocer es que el SPA no es CEO friendly. Es decir, solamente la primera pagina de un SPA es realmente la encargada de generar todo el SEO de la pagina, todas las demas paginas no entran en cuenta

QUE ES EL SEO
Search Engine Optimization, o SEO, es el proceso de mejorar la visibilidad de una p√°gina web en los resultados. A profundidad son BOTS que andan en la web, y que son los responsables de analizar nuestro sitio en busca de enlaces, palabras clave, etc. y que nos dan una puntuacion de 1 a 10, de esta forma logran categorizar las paginas y depende de la calificacion puede salir o no en los resultados de busqueda.

Un caso de uso de esto mismo es cuando el usuario quiere entrar o busca algo en google, y los resultados llevan a una app web, pero llevan a un punto exacto de la aplicacion, no a la aplicacion en si. Esto es posible gracias a que el SEO es capaz de analizar todas las paginas de la aplicacion y poder llevar al usuario a la pagina que mas se ajusta a lo que busca.

Es mas, nosotros como programadores podemos ayudarle al bot de google a saber cuando una pagina quiero que se siga mostrando y cuando una pagina solamente va estar disponible por un limite de tiempo

En esto mismo, NEXT reluce puesto que es experto en servir contenido estatico y generado desde el lado del servidor

Dicho esto una vez, quedamos al tanto de que es NEXT, y para que funciona, asi que procedemos a tocar codigo plenamente

TURBOPACK
Turbopack se encuentra en beta pero puede habilitarse en el package.json agregando --turbo al script de desarrollo por el momento.

ARCHIVOS Y DIRECTORIOS
README, en este archivo nosotros como programadores deberiamos de dejar una serie de instrucciones para los futuros programadores que vean nuestra app y decirle como levantar la aplicacion, como instalar ciertas imagenes de docker si es que las necesitamos y cualquier otro minimo de informacion necesaria para que la app funcione

CARPETA APP
La carpeta app es la base de nuestro proyecto o app, y de hecho el archivo conocido como layout.tsx es el encargado, todo lo que modifiquemos dentro de el es como si estuvieramos modificando el archivo HTML de una pagina tradicional

Importante, el modulo next/font/google nos permite cargar fuentes de google fonts sin necesidad de otro paquete

RUTAS ADICIONALES
Es importante recordar que todo lo que queramos enrutar en nuestra app debe de estar dentro de la carpeta /app, asi mismo, hay nombres ya definidos como /app/pages, /app/components, /app/api, /app/utils, y nombres de archivos como layout, page, error, loading, entre otros

Para crear rutas que esten a la par de la ruta app, basta con crear las carpetas de dichas rutas dentro de /app y luego crear el archivo page.tsx con el esqueleto de dicha pagina escrito obviamente en TSX. Tambien es importante configuar bien la app para que muestre informacion de metatags correctamente para que se ayude al SEO automaticamente.

METADATAS Y metatags
Cuando la app carga la pagin esta busca la metadata en la misma pagina, sin embargo, si no la encuentra, seguira buscando en archivos de mayor jerarquia, hasta llegar al punto mas alto de la app

Layouts y Layouts anidados
Por defecto nextJS ya viene con un layout que se le conoce como el root layout debido a que ahi se encuentra el punto mas alto de nuestra app. Esto a su vez es un HOC debido a que estamos mandando children, es decir, le mandamos los componentes que queremos que renderice

Los layout se suelen usar para darle un estilo a nuestra app, y para que se vea bien en diferentes dispositivos, y podemos hacer que solamente se muestre en determinadas partes de nuestra app exceptuando otras. Por esto es que el layout debe de ser un HOC donde nosotros decidimos a donde lo mandamos

snippet: lrc

lo que sucede detras de cortinas es que /app lee cada directorio y en la ruta donde encuentra el layout.tsx adjunta los children que serian los demas componentes, en este caso si solo tenemos page.tsx, adjunta eso directamente como children

Si queremos que diferentes rutas compartan el mismo layout, basta con crear un nuevo directorio que podemos ponerle cualquier nombre, y movemos todas las rutas que queramos dentro de ese directorio, una vez realizado eso, procedemos a crear un archivo layout dentro de /general, esto automaticamente aplicara el layout para cada ruta dentro de /general, ahora bien para indicarle a nextjs que general no lo tome como una ruta basta con renombrar el directorio y escribirlo entre parentes (general)

Ahora bien, cuando nos toca crear componentes compartidos entre paginas, como una barra de navegacion, footer, o cualquier otra cosa lo haremos en un directorio llamado components en la raiz de la /app

IMPORTANTE: Todos los componentes que no sean definidos como client-side componentes no funcionan igual que los componentes de toda la vida de React. Es decir, si hacemos un console.log, esto solamente se ejecuta en el servidor, y que es el servidor, pues la consola donde estamos ejecutando nuestra app por el momento.

Este poder de Server Componentes nos permite hacer cosas muy geniales sin interferir en la carga de componentes, y liberando asi memoria del cliente. Por ejemplo podemos hacer que nuestro componentes sean asincronos y obtener, mandar datos a la base de datos, esto se conoce como server actions